{"ast":null,"code":"var _jsxFileName = \"/Users/jerometh/PycharmProjects/LivingStones/frontend/src/components/Elements/PaginatedPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./Panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaginatedPanel = ({\n  items,\n  title,\n  itemsPerPage = 10,\n  itemName = \"Item\",\n  href = \"/item\"\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalPages = Math.ceil(items.length / itemsPerPage);\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `${href}/${item.id}/`,\n            children: item.name ? item.name : `${itemName} ${item.id}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevPage,\n          disabled: currentPage === 1,\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Page \", currentPage, \" of \", totalPages]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: currentPage === totalPages,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(PaginatedPanel, \"6xAUoJ2motYJ38x4zeUWisA+X/4=\");\n_c = PaginatedPanel;\nexport default PaginatedPanel;\nvar _c;\n$RefreshReg$(_c, \"PaginatedPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PaginatedPanel","items","title","itemsPerPage","itemName","href","_s","currentPage","setCurrentPage","totalPages","Math","ceil","length","indexOfLastItem","indexOfFirstItem","currentItems","slice","handleNextPage","handlePrevPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","id","name","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/jerometh/PycharmProjects/LivingStones/frontend/src/components/Elements/PaginatedPanel.jsx"],"sourcesContent":["import React, {useState} from 'react';\nimport \"./Panel.css\"\nconst PaginatedPanel = ({items, title, itemsPerPage = 10, itemName = \"Item\", href = \"/item\"}) => {\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const totalPages = Math.ceil(items.length / itemsPerPage);\n\n    const indexOfLastItem = currentPage * itemsPerPage;\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n    const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n    const handleNextPage = () => {\n        if (currentPage < totalPages) {\n            setCurrentPage(currentPage + 1);\n        }\n    };\n\n    const handlePrevPage = () => {\n        if (currentPage > 1) {\n            setCurrentPage(currentPage - 1);\n        }\n    };\n\n    return (\n        <div className=\"panel\">\n            <div className={\"list-container\"}>\n                <h1>{title}</h1>\n                <ul>\n                    {currentItems.map((item) => (\n                        <li key={item.id}>\n                            <a href={`${href}/${item.id}/`}>\n                                {item.name ? item.name : `${itemName} ${item.id}`}\n                            </a>\n                        </li>\n                    ))}\n                </ul>\n                <div className=\"pagination\">\n                    <button onClick={handlePrevPage} disabled={currentPage === 1}>\n                        Prev\n                    </button>\n                    <span>\n                        Page {currentPage} of {totalPages}\n                    </span>\n                    <button onClick={handleNextPage} disabled={currentPage === totalPages}>\n                        Next\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PaginatedPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}